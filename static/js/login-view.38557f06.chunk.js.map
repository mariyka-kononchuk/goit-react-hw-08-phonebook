{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/LoginView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","LoginView","dispatch","useDispatch","useState","email","setEmail","password","setPassword","handleChange","target","name","onSubmit","e","preventDefault","logIn","className","autoComplete","type","onChange"],"mappings":"6LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,wHIDvF,SAASC,IACpB,IAAMC,EAAWC,cACjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMf,EAAc,EAAdA,MACpC,OAAQe,GACJ,IAAK,QACD,OAAOL,EAASV,GACpB,IAAK,WACD,OAAOY,EAAYZ,GACvB,QACI,SAUZ,OACI,gCACI,6CACA,uBAAMgB,SAVO,SAAAC,GACjBA,EAAEC,iBACFZ,EAASa,YAAM,CAAEV,QAAOE,cACxBD,EAAS,IACTE,EAAY,KAMsBQ,UAAU,GAAGC,aAAa,MAAxD,UACQ,wBAAOD,UAAU,GAAjB,UACI,sBAAMA,UAAU,GAAhB,mBACA,uBACIA,UAAU,GACVE,KAAK,QACLP,KAAK,QACLf,MAAOS,EACPc,SAAUV,OAMtB,wBAAOO,UAAU,GAAjB,UACQ,sBAAMA,UAAU,GAAhB,sBACA,uBACIA,UAAU,GACVE,KAAK,WACLP,KAAK,WACLf,MAAOW,EACPY,SAAUV,OAGlB,wBAAQO,UAAU,GAAGE,KAAK,SAA1B","file":"static/js/login-view.38557f06.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {useState} from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { logIn } from '../redux/auth/auth-operations';\r\n\r\nexport default function LoginView() {\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        switch (name) {\r\n            case 'email':\r\n                return setEmail(value);\r\n            case 'password':\r\n                return setPassword(value);\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(logIn({ email, password }));\r\n        setEmail('');\r\n        setPassword('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1> Login page</h1>\r\n            <form onSubmit={handleSubmit} className='' autoComplete=\"off\">\r\n                    <label className=''>\r\n                        <span className=''>Email</span>\r\n                        <input\r\n                            className=''\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            value={email}\r\n                            onChange={handleChange}\r\n                            // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                            // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                            // required\r\n                        />\r\n                </label>\r\n                <label className=''>\r\n                        <span className=''>Password</span>\r\n                        <input\r\n                            className=''\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            value={password}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </label>\r\n                    <button className='' type=\"submit\">Log in</button>\r\n                </form>\r\n        </div>\r\n    )\r\n}"],"sourceRoot":""}